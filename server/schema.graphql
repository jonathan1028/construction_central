scalar DateTime

type Query {
  users: [User!]!
  me: User
  feed: [Post!]!
  filterPosts(searchString: String): [Post!]!
  post(id: ID!): Post
}

type Mutation {
  createUser(email: String!, password: String!, firstName: String): AuthPayload!
  createDraft(title: String!, content: String): Post!
  deletePost(id: ID!): Post
  publish(id: ID!): Post
  signup(email: String!, password: String!, firstName: String!, lastName: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
}

type AuthPayload {
  token: String!
  user: User!
}

type Post {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  published: Boolean!
  title: String!
  content: String
  author: User!
}

# Fields listed here are allowed to be queried by client (password is not listed because we do not want the client to be able to acces that) 
type User {
  id: ID!
  firstName: String
  lastName: String
  email: String
  posts: [Post!]!
}